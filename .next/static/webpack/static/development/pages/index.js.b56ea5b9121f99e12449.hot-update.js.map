{"version":3,"file":"static/webpack/static/development/pages/index.js.b56ea5b9121f99e12449.hot-update.js","sources":["webpack:///./utils/lng-path-corrector.js"],"sourcesContent":["import { format as formatUrl, parse as parseUrl } from 'url'\n\n// import { Config } from '../../types'\nimport { removeSubpath, subpathIsPresent } from './index'\nimport subpathIsRequired from './subpath-is-required'\nimport subpathFromLng from './subpath-from-lng'\n\nconst parseAs = (originalAs, href) => {\n  const asType = typeof originalAs\n  let as\n\n  if (asType === 'undefined') {\n    as = formatUrl(href, { unicode: true })\n  } else if (asType === 'string') {\n    as = originalAs\n  } else {\n    throw new Error(`'as' type must be 'string', but it is ${asType}`)\n  }\n\n  return as\n}\n\nconst parseHref = (originalHref) => {\n  const hrefType = typeof originalHref\n  let href\n\n  if (hrefType === 'string') {\n    href = parseUrl(originalHref, true /* parseQueryString */)\n  } else if (hrefType === 'object') {\n    href = { ...originalHref }\n    href.query = originalHref.query ? { ...originalHref.query } : {}\n  } else {\n    throw new Error(`'href' type must be either 'string' or 'object', but it is ${hrefType}`)\n  }\n\n  return href\n}\n\nexport default (config, currentRoute, currentLanguage) => {\n  const { allLanguages, localeSubpaths } = config\n  const { as: originalAs, href: originalHref } = currentRoute\n\n  if (!allLanguages.includes(currentLanguage)) {\n    throw new Error('Invalid configuration: Current language is not included in all languages array')\n  }\n\n  let href = parseHref(originalHref)\n  let as = parseAs(originalAs, href)\n\n  /*\n    url.format prefers the 'url.search' string over\n    the 'url.query' object, so remove the search\n    string to ensure the query object is used.\n  */\n  delete href.search\n\n  /*\n    Strip any/all subpaths from the `as` value\n  */\n  Object.values(localeSubpaths).forEach((subpath) => {\n    if (subpathIsPresent(as, subpath)) {\n      as = removeSubpath(as, subpath)\n    }\n  })\n\n  if (subpathIsRequired(config, currentLanguage)) {\n    const basePath = `${href.protocol}//${href.host}`\n    const currentAs = as.replace(basePath, '')\n    const subpath = subpathFromLng(config, currentLanguage)\n    as = `/${currentAs}/${subpath}`.replace(/\\/$/, '')\n    href.query.lng = currentLanguage\n    href.query.subpath = subpath\n    console.log(href)\n  }\n\n  return { as, href }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}