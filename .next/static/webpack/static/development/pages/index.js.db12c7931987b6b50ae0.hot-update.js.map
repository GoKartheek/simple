{"version":3,"file":"static/webpack/static/development/pages/index.js.db12c7931987b6b50ae0.hot-update.js","sources":["webpack:///./components/Link.js"],"sourcesContent":["/*\n  This `Link` component is a wrap of the standard\n  NextJs `Link` component, with some simple lang\n  redirect logic in place.\n  If you haven't already, read this issue comment:\n  https://github.com/zeit/next.js/issues/2833#issuecomment-414919347\n  This component automatically provides this functionality:\n  <Link href=\"/product?slug=something\" as=\"/products/something\">\n  Wherein `slug` is actually our i18n lang, and it gets\n  pulled automatically.\n  Very important: if you import `Link` from NextJs directly,\n  and not this file, your lang subpath routing will break.\n*/\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport NextLink from 'next/link'\nimport { withTranslation } from 'react-i18next'\n\n// import { I18n, Config } from '../../types.d'\nimport { lngPathCorrector, subpathIsRequired } from '../utils'\nimport nextI18next from '../i18n'\nimport withInternals from '../hocs/with-internals'\n\nconst removeWithTranslationProps = (props) => {\n  const strippedProps = Object.assign({}, props)\n  delete strippedProps.defaultNS\n  delete strippedProps.i18n\n  delete strippedProps.i18nOptions\n  delete strippedProps.lng\n  delete strippedProps.reportNS\n  delete strippedProps.t\n  delete strippedProps.tReady\n  delete strippedProps.forwardedRef\n  return strippedProps\n}\n\n// type Props = LinkProps & {\n//   i18n: I18n;\n//   nextI18NextInternals: {\n//     config: Config;\n//   };\n// }\n\nclass Link extends React.Component {\n  \n\n//   static defaultProps = {\n//     as: undefined,\n//   }\n\n  render() {\n    const {\n      as, children, href, i18n, nextI18NextInternals, ...props\n    } = this.props\n    console.log('*', this.props)\n    const { language } = i18n\n    const { config } = nextI18NextInternals\n\n    if (subpathIsRequired(config, language)) {\n      const { as: correctedAs, href: correctedHref } = lngPathCorrector(\n        config, { as, href }, language,\n      )\n      return (\n        <NextLink\n          href={correctedHref}\n          as={correctedAs}\n          {...removeWithTranslationProps(props)}\n        >\n          {children}\n        </NextLink>\n      )\n    }\n\n    return (\n      <NextLink\n        href={href}\n        as={as}\n        {...removeWithTranslationProps(props)}\n      >\n        {children}\n      </NextLink>\n    )\n  }\n}\n\nLink.propTypes = {\n    as: PropTypes.string,\n    children: PropTypes.node.isRequired,\n    href: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object,\n    ]).isRequired,\n    nextI18NextInternals: PropTypes.shape({\n        config: PropTypes.shape({\n        defaultLanguage: PropTypes.string.isRequired,\n        localeSubpaths: PropTypes.object.isRequired,\n        }).isRequired,\n    }).isRequired,\n    i18n: PropTypes.object,\n}\n\nconst nextI18NextInternals = { config: nextI18next.config, i18n: nextI18next.i18n }\n\n/*\n  Usage of `withTranslation` here is just to\n  force `Link` to rerender on language change\n*/\nexport default withInternals(withTranslation()(Link), nextI18NextInternals)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAJA;AAAA;AACA;AAOA;AAAA;AAEA;AAAA;AAAA;AAFA;AAAA;AACA;AAGA;AAEA;AACA;AAFA;AAQA;AACA;AACA;AAEA;AACA;AAFA;AAQA;;;;AAvCA;AACA;AAyCA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAbA;AAgBA;AAAA;AAAA;AAAA;AAEA;;;;;AAIA;;;;A","sourceRoot":""}