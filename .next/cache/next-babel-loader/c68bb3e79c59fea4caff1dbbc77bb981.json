{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Object$freeze from \"@babel/runtime-corejs2/core-js/object/freeze\";\n\n/* eslint-disable no-console */\n\n/**\n  * @readonly\n  * @enum {String} A console.log type\n  */\nconst messageTypes = {\n  error: 'error',\n  info: 'info',\n  warn: 'warn'\n};\n\n_Object$freeze(messageTypes);\n/**\n *  Logs a custom message to console\n * @param {messageTypes} messageType One of: error, warn or info\n * @param {String} message\n */\n\n\nfunction logMessage(messageType, message) {\n  if (_Object$values(messageTypes).includes(messageType)) {\n    console[messageType](message);\n  } else {\n    console.info(message);\n  }\n}\n/**\n * Create a console log with specified log type, a message and options\n * @param {messageTypes} messageType One of: error, warn or info\n * @param {String} message\n * @param {Object} options\n */\n\n\nexport default function createConsoleLog(messageType, message) {\n  const {\n    errorStackTraceLimit,\n    strictMode\n  } = this.config;\n  const prevStackLimit = Error.stackTraceLimit;\n  let util;\n\n  if (!strictMode) {\n    return;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    util = require('util');\n  } else {\n    return;\n  }\n  /* Temporarily set the stacktrace to 0 or errorStackTraceLimit,\n     in order to only display a message */\n\n\n  Error.stackTraceLimit = errorStackTraceLimit; // Make room for new message\n\n  console.log(); // Make sure the message is a string\n\n  if (typeof message !== 'string') {\n    const metaError = new Error();\n    metaError.name = 'Meta';\n    metaError.message = `Param message needs to be of type: string. Instead, '${typeof message}' was provided.\\n\n------------------------------------------------\\n\n\\u200b\n        The provided ${typeof message}:\\n\n\\u200b\n          ${util.inspect(message, true, 8, true)}\n\\u200b\n------------------------------------------------\\n\n    `;\n    console.error(metaError);\n    return;\n  } // Log the message to console\n\n\n  logMessage(messageType, message); // Reset stack limit\n\n  Error.stackTraceLimit = prevStackLimit;\n}","map":{"version":3,"sources":["/Users/kartheek/Desktop/zenrays/next/lang/simple/utils/console-message.js"],"names":["messageTypes","error","info","warn","logMessage","messageType","message","includes","console","createConsoleLog","errorStackTraceLimit","strictMode","config","prevStackLimit","Error","stackTraceLimit","util","process","env","NODE_ENV","require","log","metaError","name","inspect"],"mappings":";;;AAAA;;AAEA;;;;AAIA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,OADY;AAEnBC,EAAAA,IAAI,EAAE,MAFa;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;;AAMA,eAAcH,YAAd;AAEA;;;;;;;AAKA,SAASI,UAAT,CAAoBC,WAApB,EAAiCC,OAAjC,EAA0C;AACxC,MAAI,eAAcN,YAAd,EAA4BO,QAA5B,CAAqCF,WAArC,CAAJ,EAAuD;AACrDG,IAAAA,OAAO,CAACH,WAAD,CAAP,CAAqBC,OAArB;AACD,GAFD,MAEO;AACLE,IAAAA,OAAO,CAACN,IAAR,CAAaI,OAAb;AACD;AACF;AAED;;;;;;;;AAMA,eAAe,SAASG,gBAAT,CAA0BJ,WAA1B,EAAuCC,OAAvC,EAAgD;AAE7D,QAAM;AAAEI,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,MAAuC,KAAKC,MAAlD;AAEA,QAAMC,cAAc,GAAGC,KAAK,CAACC,eAA7B;AAEA,MAAIC,IAAJ;;AAEA,MAAI,CAACL,UAAL,EAAiB;AACf;AACD;;AAED,MAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,IAAAA,IAAI,GAAGI,OAAO,CAAC,MAAD,CAAd;AACD,GAFD,MAEO;AACL;AACD;AAED;;;;AAEAN,EAAAA,KAAK,CAACC,eAAN,GAAwBL,oBAAxB,CApB6D,CAsB7D;;AACAF,EAAAA,OAAO,CAACa,GAAR,GAvB6D,CAyB7D;;AACA,MAAI,OAAOf,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAMgB,SAAS,GAAG,IAAIR,KAAJ,EAAlB;AACAQ,IAAAA,SAAS,CAACC,IAAV,GAAiB,MAAjB;AACAD,IAAAA,SAAS,CAAChB,OAAV,GAAqB,wDAAuD,OAAOA,OAAQ;;;uBAGxE,OAAOA,OAAQ;;YAE1BU,IAAI,CAACQ,OAAL,CAAalB,OAAb,EAAsB,IAAtB,EAA4B,CAA5B,EAA+B,IAA/B,CAAqC;;;KAL7C;AASAE,IAAAA,OAAO,CAACP,KAAR,CAAcqB,SAAd;AACA;AACD,GAxC4D,CA0C7D;;;AACAlB,EAAAA,UAAU,CAACC,WAAD,EAAcC,OAAd,CAAV,CA3C6D,CA6C7D;;AACAQ,EAAAA,KAAK,CAACC,eAAN,GAAwBF,cAAxB;AAED","sourcesContent":["/* eslint-disable no-console */\n\n/**\n  * @readonly\n  * @enum {String} A console.log type\n  */\nconst messageTypes = {\n  error: 'error',\n  info: 'info',\n  warn: 'warn',\n}\n\nObject.freeze(messageTypes)\n\n/**\n *  Logs a custom message to console\n * @param {messageTypes} messageType One of: error, warn or info\n * @param {String} message\n */\nfunction logMessage(messageType, message) {\n  if (Object.values(messageTypes).includes(messageType)) {\n    console[messageType](message)\n  } else {\n    console.info(message)\n  }\n}\n\n/**\n * Create a console log with specified log type, a message and options\n * @param {messageTypes} messageType One of: error, warn or info\n * @param {String} message\n * @param {Object} options\n */\nexport default function createConsoleLog(messageType, message) {\n\n  const { errorStackTraceLimit, strictMode } = this.config\n\n  const prevStackLimit = Error.stackTraceLimit\n\n  let util\n\n  if (!strictMode) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    util = require('util')\n  } else {\n    return\n  }\n\n  /* Temporarily set the stacktrace to 0 or errorStackTraceLimit,\n     in order to only display a message */\n  Error.stackTraceLimit = errorStackTraceLimit\n\n  // Make room for new message\n  console.log()\n\n  // Make sure the message is a string\n  if (typeof message !== 'string') {\n    const metaError = new Error()\n    metaError.name = 'Meta'\n    metaError.message = `Param message needs to be of type: string. Instead, '${typeof message}' was provided.\\n\n------------------------------------------------\\n\n\\u200b\n        The provided ${typeof message}:\\n\n\\u200b\n          ${util.inspect(message, true, 8, true)}\n\\u200b\n------------------------------------------------\\n\n    `\n    console.error(metaError)\n    return\n  }\n\n  // Log the message to console\n  logMessage(messageType, message)\n\n  // Reset stack limit\n  Error.stackTraceLimit = prevStackLimit\n\n}\n"]},"metadata":{},"sourceType":"module"}